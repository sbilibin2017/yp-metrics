// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/yp-metrics/internal/handlers/metric_list.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/yp-metrics/internal/types"
)

// MockMetricLister is a mock of MetricLister interface.
type MockMetricLister struct {
	ctrl     *gomock.Controller
	recorder *MockMetricListerMockRecorder
}

// MockMetricListerMockRecorder is the mock recorder for MockMetricLister.
type MockMetricListerMockRecorder struct {
	mock *MockMetricLister
}

// NewMockMetricLister creates a new mock instance.
func NewMockMetricLister(ctrl *gomock.Controller) *MockMetricLister {
	mock := &MockMetricLister{ctrl: ctrl}
	mock.recorder = &MockMetricListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricLister) EXPECT() *MockMetricListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockMetricLister) List(ctx context.Context) ([]types.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]types.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMetricListerMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMetricLister)(nil).List), ctx)
}
