// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/yp-metrics/internal/services/metric_get.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/yp-metrics/internal/types"
)

// MockMetricGetter is a mock of MetricGetter interface.
type MockMetricGetter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricGetterMockRecorder
}

// MockMetricGetterMockRecorder is the mock recorder for MockMetricGetter.
type MockMetricGetterMockRecorder struct {
	mock *MockMetricGetter
}

// NewMockMetricGetter creates a new mock instance.
func NewMockMetricGetter(ctrl *gomock.Controller) *MockMetricGetter {
	mock := &MockMetricGetter{ctrl: ctrl}
	mock.recorder = &MockMetricGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricGetter) EXPECT() *MockMetricGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMetricGetter) Get(ctx context.Context, id types.MetricID) (*types.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*types.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMetricGetterMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetricGetter)(nil).Get), ctx, id)
}
